import json
import pandas as pd
import spacy
import logging
from flask import Flask, request, jsonify
from flask_cors import CORS

# Configure logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# Load spaCy NLP model
nlp = spacy.load("en_core_web_sm")

app = Flask(__name__)
CORS(app, resources={r"/*": {"origins": "http://localhost:3000"}})  # Restrict CORS to frontend

# Load JSON Database
try:
    with open("database.json", "r") as file:
        data = json.load(file)
    df = pd.DataFrame.from_dict(data, orient="index")
except Exception as e:
    logging.error(f"Error loading database.json: {e}")
    df = pd.DataFrame()

# Synonym Mapping (Add more as needed)
synonyms = {
    "procedure": "process",
    "process": "procedure",
    "lawsuit": "case",
    "petition": "application"
}

# Function to extract important words from user input
def extract_keywords(user_input):
    doc = nlp(user_input.lower())
    keywords = []

    for token in doc:
        if not token.is_stop and not token.is_punct and not token.like_num:
            word = token.lemma_
            if word in synonyms:
                word = synonyms[word]
            keywords.append(word)
    
    logging.info(f"Extracted keywords: {keywords}")
    return keywords

# Function to find the most relevant case based on user input
def find_case_type(user_input):
    keywords = extract_keywords(user_input)

    best_match = None
    best_score = 0

    for case in df.index:
        case_text = case.replace("_", " ")
        case_keywords = extract_keywords(case_text)

        match_count = sum(1 for word in keywords if word in case_keywords)
        similarity = match_count / max(len(case_keywords), 1)

        if similarity > best_score:
            best_score = similarity
            best_match = case

    logging.info(f"Best match found: {best_match} with a similarity score of {best_score}")
    return best_match

# API Endpoint to Greet User
@app.route("/greet", methods=["GET"])
def greet():
    return jsonify({"message": "Hi! What procedure do you want to know today?"})

# API Endpoint to Get Step-by-Step Guidance
@app.route("/getSteps", methods=["POST"])
def get_steps():
    data = request.json
    user_input = data.get("query", "").strip()

    if not user_input:
        return jsonify({"error": "Oops! Looks like you forgot to enter a procedure. Try again!"}), 400

    logging.info(f"User query received: {user_input}")

    case_type = find_case_type(user_input)

    if not case_type:
        return jsonify({"error": "Procedure not found. Please check your input or try similar terms."}), 404

    steps = df.loc[case_type, "steps"]
    return jsonify({"title": df.loc[case_type, "title"], "steps": steps})

if __name__ == "__main__":
    logging.info("Starting Flask server on port 5000...")
    app.run(port=5000)
